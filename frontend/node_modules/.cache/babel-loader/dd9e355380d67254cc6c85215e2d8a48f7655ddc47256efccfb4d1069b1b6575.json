{"ast":null,"code":"// import React, {useState} from 'react';\n// import axios from 'axios';\n\n// const AddSubjectForm = ({onAddSubject}) => {\n//     const [formData, setFormData] = useState({\n//         name: '',\n//         code: '',\n//         credits: '',\n//         department: '',\n//         semester: '',\n//         lectureHours: '',\n//         labHours: '',\n//         type: 'Core'\n//     });\n\n//     const handleChange = (e) => {\n//         setFormData({\n//             ...formData,\n//             [e.target.name]: e.target.value\n//         });\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         try {\n//             await axios.post('http://localhost:5000/api/subjects', formData);\n//             onAddSubject();\n//         } catch (error) {\n//             console.error('Error adding subject:', error);\n//         }\n//     };\n\n//     return (\n//         <form onSubmit={handleSubmit}>\n//             <h3>Add New Subject</h3>\n//             <input type=\"text\" name=\"name\" placeholder=\"Subject Name\" value={formData.name} onChange={handleChange} required />\n//             <input type=\"text\" name=\"code\" placeholder=\"Subject Code\" value={formData.code} onChange={handleChange} required />\n//             <input type=\"number\" name=\"credits\" placeholder=\"Credits\" value={formData.credits} onChange={handleChange} required />\n//             <input type=\"text\" name=\"department\" placeholder=\"Department\" value={formData.department} onChange={handleChange} required />\n//             <input type=\"number\" name=\"semester\" placeholder=\"Semester\" value={formData.semester} onChange={handleChange} required />\n//             <input type=\"number\" name=\"lectureHours\" placeholder=\"Lecture Hours\" value={formData.lectureHours} onChange={handleChange} />\n//             <input type=\"number\" name=\"labHours\" placeholder=\"Lab Hours\" value={formData.labHours} onChange={handleChange} />\n//             <select name=\"type\" value={formData.type} onChange={handleChange} required>\n//                 <option value=\"Core\">Core</option>\n//                 <option value=\"Elective\">Elective</option>\n//                 <option value=\"Lab\">Lab</option>\n//             </select>\n//             <button type=\"submit\">Add Subject</button>\n//         </form>\n//     );\n// }\n\n// export default AddSubjectForm;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './AddSubjectForm.css';\n\n// const AddSubjectForm = ({ onAddSubject, onCancel, isSubmitting = false }) => {\n//     const [formData, setFormData] = useState({\n//         name: '',\n//         code: '',\n//         credits: '',\n//         department: '',\n//         semester: '',\n//         lectureHours: '',\n//         labHours: '',\n//         type: 'Core'\n//     });\n\n//     const [errors, setErrors] = useState({});\n//     const [touched, setTouched] = useState({});\n//     const [isSubmittingLocal, setIsSubmittingLocal] = useState(false);\n\n//     // Field validation rules\n//     const validateField = (name, value) => {\n//         switch (name) {\n//             case 'name':\n//                 if (!value.trim()) return 'Subject name is required';\n//                 if (value.length < 3) return 'Subject name must be at least 3 characters';\n//                 if (value.length > 100) return 'Subject name must be less than 100 characters';\n//                 return '';\n\n//             case 'code':\n//                 if (!value.trim()) return 'Subject code is required';\n//                 if (!/^[A-Z]{2,5}\\d{2,4}$/i.test(value)) return 'Invalid code format (e.g., CS101, MATH201)';\n//                 return '';\n\n//             case 'credits':\n//                 if (!value) return 'Credits are required';\n//                 if (value < 1 || value > 10) return 'Credits must be between 1 and 10';\n//                 return '';\n\n//             case 'department':\n//                 if (!value.trim()) return 'Department is required';\n//                 if (value.length < 2) return 'Department name must be at least 2 characters';\n//                 return '';\n\n//             case 'semester':\n//                 if (!value) return 'Semester is required';\n//                 if (value < 1 || value > 8) return 'Semester must be between 1 and 8';\n//                 return '';\n\n//             case 'lectureHours':\n//                 if (value && (value < 0 || value > 20)) return 'Lecture hours must be between 0 and 20';\n//                 return '';\n\n//             case 'labHours':\n//                 if (value && (value < 0 || value > 20)) return 'Lab hours must be between 0 and 20';\n//                 return '';\n\n//             default:\n//                 return '';\n//         }\n//     };\n\n//     // Validate all fields\n//     const validateForm = () => {\n//         const newErrors = {};\n//         Object.keys(formData).forEach(key => {\n//             const error = validateField(key, formData[key]);\n//             if (error) newErrors[key] = error;\n//         });\n\n//         // Additional validation: at least one of lecture or lab hours should be specified\n//         if (!formData.lectureHours && !formData.labHours) {\n//             newErrors.hours = 'Please specify either lecture hours or lab hours (or both)';\n//         }\n\n//         return newErrors;\n//     };\n\n//     const handleChange = (e) => {\n//         const { name, value } = e.target;\n\n//         // Update form data\n//         setFormData({\n//             ...formData,\n//             [name]: value\n//         });\n\n//         // Clear error for this field\n//         if (errors[name]) {\n//             setErrors({\n//                 ...errors,\n//                 [name]: ''\n//             });\n//         }\n\n//         // Real-time validation for touched fields\n//         if (touched[name]) {\n//             const error = validateField(name, value);\n//             setErrors({\n//                 ...errors,\n//                 [name]: error\n//             });\n//         }\n//     };\n\n//     const handleBlur = (e) => {\n//         const { name, value } = e.target;\n\n//         // Mark field as touched\n//         setTouched({\n//             ...touched,\n//             [name]: true\n//         });\n\n//         // Validate field\n//         const error = validateField(name, value);\n//         setErrors({\n//             ...errors,\n//             [name]: error\n//         });\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         // Validate entire form\n//         const formErrors = validateForm();\n//         setErrors(formErrors);\n//         setTouched(Object.keys(formData).reduce((acc, key) => ({ ...acc, [key]: true }), {}));\n\n//         // If there are errors, don't submit\n//         if (Object.keys(formErrors).length > 0) {\n//             return;\n//         }\n\n//         setIsSubmittingLocal(true);\n\n//         try {\n//             await axios.post('http://localhost:5000/api/subjects', {\n//                 ...formData,\n//                 credits: parseInt(formData.credits),\n//                 semester: parseInt(formData.semester),\n//                 lectureHours: formData.lectureHours ? parseInt(formData.lectureHours) : 0,\n//                 labHours: formData.labHours ? parseInt(formData.labHours) : 0\n//             });\n\n//             onAddSubject(formData);\n//         } catch (error) {\n//             console.error('Error adding subject:', error);\n\n//             // Handle specific error cases\n//             if (error.response?.status === 400) {\n//                 if (error.response.data.message?.includes('duplicate') || error.response.data.message?.includes('exists')) {\n//                     setErrors({ code: 'Subject code already exists' });\n//                 } else {\n//                     setErrors({ general: error.response.data.message || 'Invalid data provided' });\n//                 }\n//             } else if (error.response?.status === 500) {\n//                 setErrors({ general: 'Server error. Please try again later.' });\n//             } else {\n//                 setErrors({ general: 'Failed to add subject. Please check your connection and try again.' });\n//             }\n//         } finally {\n//             setIsSubmittingLocal(false);\n//         }\n//     };\n\n//     const handleReset = () => {\n//         if (window.confirm('Are you sure you want to clear all fields?')) {\n//             setFormData({\n//                 name: '',\n//                 code: '',\n//                 credits: '',\n//                 department: '',\n//                 semester: '',\n//                 lectureHours: '',\n//                 labHours: '',\n//                 type: 'Core'\n//             });\n//             setErrors({});\n//             setTouched({});\n//         }\n//     };\n\n//     const isFieldInvalid = (fieldName) => touched[fieldName] && errors[fieldName];\n//     const isFieldValid = (fieldName) => touched[fieldName] && !errors[fieldName] && formData[fieldName];\n//     const submitting = isSubmitting || isSubmittingLocal;\n\n//     return (\n//         <div className=\"add-subject-form-container\">\n//             {errors.general && (\n//                 <div className=\"error-banner\">\n//                     <span className=\"error-icon\">⚠️</span>\n//                     {errors.general}\n//                 </div>\n//             )}\n\n//             <form onSubmit={handleSubmit} className=\"add-subject-form\" noValidate>\n//                 <div className=\"form-grid\">\n//                     {/* Subject Name */}\n//                     <div className=\"form-group\">\n//                         <label htmlFor=\"name\" className=\"form-label\">\n//                             Subject Name *\n//                         </label>\n//                         <div className=\"input-wrapper\">\n//                             <input \n//                                 type=\"text\" \n//                                 id=\"name\"\n//                                 name=\"name\" \n//                                 placeholder=\"Enter subject name (e.g., Introduction to Computer Science)\" \n//                                 value={formData.name} \n//                                 onChange={handleChange}\n//                                 onBlur={handleBlur}\n//                                 required \n//                                 disabled={submitting}\n//                                 className={`form-input ${isFieldInvalid('name') ? 'invalid' : ''} ${isFieldValid('name') ? 'valid' : ''}`}\n//                             />\n//                             <div className=\"input-status\">\n//                                 {isFieldValid('name') && <span className=\"valid-icon\">✅</span>}\n//                                 {isFieldInvalid('name') && <span className=\"invalid-icon\">❌</span>}\n//                             </div>\n//                         </div>\n//                         {errors.name && <div className=\"field-error\">{errors.name}</div>}\n//                     </div>\n\n//                     {/* Subject Code */}\n//                     <div className=\"form-group\">\n//                         <label htmlFor=\"code\" className=\"form-label\">\n//                             Subject Code *\n//                         </label>\n//                         <div className=\"input-wrapper\">\n//                             <input \n//                                 type=\"text\" \n//                                 id=\"code\"\n//                                 name=\"code\" \n//                                 placeholder=\"Enter subject code (e.g., CS101)\" \n//                                 value={formData.code} \n//                                 onChange={handleChange}\n//                                 onBlur={handleBlur}\n//                                 required \n//                                 disabled={submitting}\n//                                 className={`form-input ${isFieldInvalid('code') ? 'invalid' : ''} ${isFieldValid('code') ? 'valid' : ''}`}\n//                                 style={{ textTransform: 'uppercase' }}\n//                             />\n//                             <div className=\"input-status\">\n//                                 {isFieldValid('code') && <span className=\"valid-icon\">✅</span>}\n//                                 {isFieldInvalid('code') && <span className=\"invalid-icon\">❌</span>}\n//                             </div>\n//                         </div>\n//                         {errors.code && <div className=\"field-error\">{errors.code}</div>}\n//                     </div>\n\n//                     {/* Credits */}\n//                     <div className=\"form-group\">\n//                         <label htmlFor=\"credits\" className=\"form-label\">\n//                             Credits *\n//                         </label>\n//                         <div className=\"input-wrapper\">\n//                             <input \n//                                 type=\"number\" \n//                                 id=\"credits\"\n//                                 name=\"credits\" \n//                                 placeholder=\"Enter credits (1-10)\" \n//                                 value={formData.credits} \n//                                 onChange={handleChange}\n//                                 onBlur={handleBlur}\n//                                 required \n//                                 min=\"1\"\n//                                 max=\"10\"\n//                                 disabled={submitting}\n//                                 className={`form-input ${isFieldInvalid('credits') ? 'invalid' : ''} ${isFieldValid('credits') ? 'valid' : ''}`}\n//                             />\n//                             <div className=\"input-status\">\n//                                 {isFieldValid('credits') && <span className=\"valid-icon\">✅</span>}\n//                                 {isFieldInvalid('credits') && <span className=\"invalid-icon\">❌</span>}\n//                             </div>\n//                         </div>\n//                         {errors.credits && <div className=\"field-error\">{errors.credits}</div>}\n//                     </div>\n\n//                     {/* Department */}\n//                     <div className=\"form-group\">\n//                         <label htmlFor=\"department\" className=\"form-label\">\n//                             Department *\n//                         </label>\n//                         <div className=\"input-wrapper\">\n//                             <input \n//                                 type=\"text\" \n//                                 id=\"department\"\n//                                 name=\"department\" \n//                                 placeholder=\"Enter department (e.g., Computer Science)\" \n//                                 value={formData.department} \n//                                 onChange={handleChange}\n//                                 onBlur={handleBlur}\n//                                 required \n//                                 disabled={submitting}\n//                                 className={`form-input ${isFieldInvalid('department') ? 'invalid' : ''} ${isFieldValid('department') ? 'valid' : ''}`}\n//                             />\n//                             <div className=\"input-status\">\n//                                 {isFieldValid('department') && <span className=\"valid-icon\">✅</span>}\n//                                 {isFieldInvalid('department') && <span className=\"invalid-icon\">❌</span>}\n//                             </div>\n//                         </div>\n//                         {errors.department && <div className=\"field-error\">{errors.department}</div>}\n//                     </div>\n\n//                     {/* Semester */}\n//                     <div className=\"form-group\">\n//                         <label htmlFor=\"semester\" className=\"form-label\">\n//                             Semester *\n//                         </label>\n//                         <div className=\"input-wrapper\">\n//                             <input \n//                                 type=\"number\" \n//                                 id=\"semester\"\n//                                 name=\"semester\" \n//                                 placeholder=\"Enter semester (1-8)\" \n//                                 value={formData.semester} \n//                                 onChange={handleChange}\n//                                 onBlur={handleBlur}\n//                                 required \n//                                 min=\"1\"\n//                                 max=\"8\"\n//                                 disabled={submitting}\n//                                 className={`form-input ${isFieldInvalid('semester') ? 'invalid' : ''} ${isFieldValid('semester') ? 'valid' : ''}`}\n//                             />\n//                             <div className=\"input-status\">\n//                                 {isFieldValid('semester') && <span className=\"valid-icon\">✅</span>}\n//                                 {isFieldInvalid('semester') && <span className=\"invalid-icon\">❌</span>}\n//                             </div>\n//                         </div>\n//                         {errors.semester && <div className=\"field-error\">{errors.semester}</div>}\n//                     </div>\n\n//                     {/* Subject Type */}\n//                     <div className=\"form-group\">\n//                         <label htmlFor=\"type\" className=\"form-label\">\n//                             Subject Type *\n//                         </label>\n//                         <div className=\"input-wrapper\">\n//                             <select \n//                                 id=\"type\"\n//                                 name=\"type\" \n//                                 value={formData.type} \n//                                 onChange={handleChange}\n//                                 required \n//                                 disabled={submitting}\n//                                 className=\"form-select\"\n//                             >\n//                                 <option value=\"Core\">Core Subject</option>\n//                                 <option value=\"Elective\">Elective</option>\n//                                 <option value=\"Lab\">Laboratory</option>\n//                             </select>\n//                             <div className=\"select-arrow\">▼</div>\n//                         </div>\n//                     </div>\n//                 </div>\n\n//                 {/* Hours Section */}\n//                 <div className=\"hours-section\">\n//                     <h4 className=\"section-title\">\n//                         <span className=\"section-icon\">⏰</span>\n//                         Weekly Hours\n//                     </h4>\n//                     <div className=\"hours-grid\">\n//                         <div className=\"form-group\">\n//                             <label htmlFor=\"lectureHours\" className=\"form-label\">\n//                                 Lecture Hours\n//                             </label>\n//                             <div className=\"input-wrapper\">\n//                                 <input \n//                                     type=\"number\" \n//                                     id=\"lectureHours\"\n//                                     name=\"lectureHours\" \n//                                     placeholder=\"Enter lecture hours\" \n//                                     value={formData.lectureHours} \n//                                     onChange={handleChange}\n//                                     onBlur={handleBlur}\n//                                     min=\"0\"\n//                                     max=\"20\"\n//                                     disabled={submitting}\n//                                     className={`form-input ${isFieldInvalid('lectureHours') ? 'invalid' : ''} ${isFieldValid('lectureHours') ? 'valid' : ''}`}\n//                                 />\n//                                 <div className=\"input-status\">\n//                                     {isFieldValid('lectureHours') && <span className=\"valid-icon\">✅</span>}\n//                                     {isFieldInvalid('lectureHours') && <span className=\"invalid-icon\">❌</span>}\n//                                 </div>\n//                             </div>\n//                             {errors.lectureHours && <div className=\"field-error\">{errors.lectureHours}</div>}\n//                         </div>\n\n//                         <div className=\"form-group\">\n//                             <label htmlFor=\"labHours\" className=\"form-label\">\n//                                 Lab Hours\n//                             </label>\n//                             <div className=\"input-wrapper\">\n//                                 <input \n//                                     type=\"number\" \n//                                     id=\"labHours\"\n//                                     name=\"labHours\" \n//                                     placeholder=\"Enter lab hours\" \n//                                     value={formData.labHours} \n//                                     onChange={handleChange}\n//                                     onBlur={handleBlur}\n//                                     min=\"0\"\n//                                     max=\"20\"\n//                                     disabled={submitting}\n//                                     className={`form-input ${isFieldInvalid('labHours') ? 'invalid' : ''} ${isFieldValid('labHours') ? 'valid' : ''}`}\n//                                 />\n//                                 <div className=\"input-status\">\n//                                     {isFieldValid('labHours') && <span className=\"valid-icon\">✅</span>}\n//                                     {isFieldInvalid('labHours') && <span className=\"invalid-icon\">❌</span>}\n//                                 </div>\n//                             </div>\n//                             {errors.labHours && <div className=\"field-error\">{errors.labHours}</div>}\n//                         </div>\n//                     </div>\n//                     {errors.hours && <div className=\"field-error section-error\">{errors.hours}</div>}\n//                 </div>\n\n//                 {/* Form Actions */}\n//                 <div className=\"form-actions\">\n//                     <button \n//                         type=\"button\" \n//                         onClick={handleReset}\n//                         className=\"btn btn-outline\"\n//                         disabled={submitting}\n//                     >\n//                         <span className=\"btn-icon\">🔄</span>\n//                         Clear Form\n//                     </button>\n\n//                     {onCancel && (\n//                         <button \n//                             type=\"button\" \n//                             onClick={onCancel}\n//                             className=\"btn btn-secondary\"\n//                             disabled={submitting}\n//                         >\n//                             <span className=\"btn-icon\">❌</span>\n//                             Cancel\n//                         </button>\n//                     )}\n\n//                     <button \n//                         type=\"submit\" \n//                         className=\"btn btn-primary\"\n//                         disabled={submitting || Object.keys(errors).length > 0}\n//                     >\n//                         <span className=\"btn-icon\">\n//                             {submitting ? '⏳' : '💾'}\n//                         </span>\n//                         {submitting ? 'Adding Subject...' : 'Add Subject'}\n//                     </button>\n//                 </div>\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default AddSubjectForm;","map":{"version":3,"names":[],"sources":["D:/SMART_INDIA_HACKATHON/timetable-schesuler-prototype/frontend/src/components/AddSubjectForm.js"],"sourcesContent":["// import React, {useState} from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AddSubjectForm = ({onAddSubject}) => {\r\n//     const [formData, setFormData] = useState({\r\n//         name: '',\r\n//         code: '',\r\n//         credits: '',\r\n//         department: '',\r\n//         semester: '',\r\n//         lectureHours: '',\r\n//         labHours: '',\r\n//         type: 'Core'\r\n//     });\r\n\r\n//     const handleChange = (e) => {\r\n//         setFormData({\r\n//             ...formData,\r\n//             [e.target.name]: e.target.value\r\n//         });\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         try {\r\n//             await axios.post('http://localhost:5000/api/subjects', formData);\r\n//             onAddSubject();\r\n//         } catch (error) {\r\n//             console.error('Error adding subject:', error);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <form onSubmit={handleSubmit}>\r\n//             <h3>Add New Subject</h3>\r\n//             <input type=\"text\" name=\"name\" placeholder=\"Subject Name\" value={formData.name} onChange={handleChange} required />\r\n//             <input type=\"text\" name=\"code\" placeholder=\"Subject Code\" value={formData.code} onChange={handleChange} required />\r\n//             <input type=\"number\" name=\"credits\" placeholder=\"Credits\" value={formData.credits} onChange={handleChange} required />\r\n//             <input type=\"text\" name=\"department\" placeholder=\"Department\" value={formData.department} onChange={handleChange} required />\r\n//             <input type=\"number\" name=\"semester\" placeholder=\"Semester\" value={formData.semester} onChange={handleChange} required />\r\n//             <input type=\"number\" name=\"lectureHours\" placeholder=\"Lecture Hours\" value={formData.lectureHours} onChange={handleChange} />\r\n//             <input type=\"number\" name=\"labHours\" placeholder=\"Lab Hours\" value={formData.labHours} onChange={handleChange} />\r\n//             <select name=\"type\" value={formData.type} onChange={handleChange} required>\r\n//                 <option value=\"Core\">Core</option>\r\n//                 <option value=\"Elective\">Elective</option>\r\n//                 <option value=\"Lab\">Lab</option>\r\n//             </select>\r\n//             <button type=\"submit\">Add Subject</button>\r\n//         </form>\r\n//     );\r\n// }\r\n\r\n// export default AddSubjectForm;\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import './AddSubjectForm.css';\r\n\r\n// const AddSubjectForm = ({ onAddSubject, onCancel, isSubmitting = false }) => {\r\n//     const [formData, setFormData] = useState({\r\n//         name: '',\r\n//         code: '',\r\n//         credits: '',\r\n//         department: '',\r\n//         semester: '',\r\n//         lectureHours: '',\r\n//         labHours: '',\r\n//         type: 'Core'\r\n//     });\r\n\r\n//     const [errors, setErrors] = useState({});\r\n//     const [touched, setTouched] = useState({});\r\n//     const [isSubmittingLocal, setIsSubmittingLocal] = useState(false);\r\n\r\n//     // Field validation rules\r\n//     const validateField = (name, value) => {\r\n//         switch (name) {\r\n//             case 'name':\r\n//                 if (!value.trim()) return 'Subject name is required';\r\n//                 if (value.length < 3) return 'Subject name must be at least 3 characters';\r\n//                 if (value.length > 100) return 'Subject name must be less than 100 characters';\r\n//                 return '';\r\n            \r\n//             case 'code':\r\n//                 if (!value.trim()) return 'Subject code is required';\r\n//                 if (!/^[A-Z]{2,5}\\d{2,4}$/i.test(value)) return 'Invalid code format (e.g., CS101, MATH201)';\r\n//                 return '';\r\n            \r\n//             case 'credits':\r\n//                 if (!value) return 'Credits are required';\r\n//                 if (value < 1 || value > 10) return 'Credits must be between 1 and 10';\r\n//                 return '';\r\n            \r\n//             case 'department':\r\n//                 if (!value.trim()) return 'Department is required';\r\n//                 if (value.length < 2) return 'Department name must be at least 2 characters';\r\n//                 return '';\r\n            \r\n//             case 'semester':\r\n//                 if (!value) return 'Semester is required';\r\n//                 if (value < 1 || value > 8) return 'Semester must be between 1 and 8';\r\n//                 return '';\r\n            \r\n//             case 'lectureHours':\r\n//                 if (value && (value < 0 || value > 20)) return 'Lecture hours must be between 0 and 20';\r\n//                 return '';\r\n            \r\n//             case 'labHours':\r\n//                 if (value && (value < 0 || value > 20)) return 'Lab hours must be between 0 and 20';\r\n//                 return '';\r\n            \r\n//             default:\r\n//                 return '';\r\n//         }\r\n//     };\r\n\r\n//     // Validate all fields\r\n//     const validateForm = () => {\r\n//         const newErrors = {};\r\n//         Object.keys(formData).forEach(key => {\r\n//             const error = validateField(key, formData[key]);\r\n//             if (error) newErrors[key] = error;\r\n//         });\r\n        \r\n//         // Additional validation: at least one of lecture or lab hours should be specified\r\n//         if (!formData.lectureHours && !formData.labHours) {\r\n//             newErrors.hours = 'Please specify either lecture hours or lab hours (or both)';\r\n//         }\r\n        \r\n//         return newErrors;\r\n//     };\r\n\r\n//     const handleChange = (e) => {\r\n//         const { name, value } = e.target;\r\n        \r\n//         // Update form data\r\n//         setFormData({\r\n//             ...formData,\r\n//             [name]: value\r\n//         });\r\n\r\n//         // Clear error for this field\r\n//         if (errors[name]) {\r\n//             setErrors({\r\n//                 ...errors,\r\n//                 [name]: ''\r\n//             });\r\n//         }\r\n\r\n//         // Real-time validation for touched fields\r\n//         if (touched[name]) {\r\n//             const error = validateField(name, value);\r\n//             setErrors({\r\n//                 ...errors,\r\n//                 [name]: error\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const handleBlur = (e) => {\r\n//         const { name, value } = e.target;\r\n        \r\n//         // Mark field as touched\r\n//         setTouched({\r\n//             ...touched,\r\n//             [name]: true\r\n//         });\r\n\r\n//         // Validate field\r\n//         const error = validateField(name, value);\r\n//         setErrors({\r\n//             ...errors,\r\n//             [name]: error\r\n//         });\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n        \r\n//         // Validate entire form\r\n//         const formErrors = validateForm();\r\n//         setErrors(formErrors);\r\n//         setTouched(Object.keys(formData).reduce((acc, key) => ({ ...acc, [key]: true }), {}));\r\n\r\n//         // If there are errors, don't submit\r\n//         if (Object.keys(formErrors).length > 0) {\r\n//             return;\r\n//         }\r\n\r\n//         setIsSubmittingLocal(true);\r\n        \r\n//         try {\r\n//             await axios.post('http://localhost:5000/api/subjects', {\r\n//                 ...formData,\r\n//                 credits: parseInt(formData.credits),\r\n//                 semester: parseInt(formData.semester),\r\n//                 lectureHours: formData.lectureHours ? parseInt(formData.lectureHours) : 0,\r\n//                 labHours: formData.labHours ? parseInt(formData.labHours) : 0\r\n//             });\r\n            \r\n//             onAddSubject(formData);\r\n//         } catch (error) {\r\n//             console.error('Error adding subject:', error);\r\n            \r\n//             // Handle specific error cases\r\n//             if (error.response?.status === 400) {\r\n//                 if (error.response.data.message?.includes('duplicate') || error.response.data.message?.includes('exists')) {\r\n//                     setErrors({ code: 'Subject code already exists' });\r\n//                 } else {\r\n//                     setErrors({ general: error.response.data.message || 'Invalid data provided' });\r\n//                 }\r\n//             } else if (error.response?.status === 500) {\r\n//                 setErrors({ general: 'Server error. Please try again later.' });\r\n//             } else {\r\n//                 setErrors({ general: 'Failed to add subject. Please check your connection and try again.' });\r\n//             }\r\n//         } finally {\r\n//             setIsSubmittingLocal(false);\r\n//         }\r\n//     };\r\n\r\n//     const handleReset = () => {\r\n//         if (window.confirm('Are you sure you want to clear all fields?')) {\r\n//             setFormData({\r\n//                 name: '',\r\n//                 code: '',\r\n//                 credits: '',\r\n//                 department: '',\r\n//                 semester: '',\r\n//                 lectureHours: '',\r\n//                 labHours: '',\r\n//                 type: 'Core'\r\n//             });\r\n//             setErrors({});\r\n//             setTouched({});\r\n//         }\r\n//     };\r\n\r\n//     const isFieldInvalid = (fieldName) => touched[fieldName] && errors[fieldName];\r\n//     const isFieldValid = (fieldName) => touched[fieldName] && !errors[fieldName] && formData[fieldName];\r\n//     const submitting = isSubmitting || isSubmittingLocal;\r\n\r\n//     return (\r\n//         <div className=\"add-subject-form-container\">\r\n//             {errors.general && (\r\n//                 <div className=\"error-banner\">\r\n//                     <span className=\"error-icon\">⚠️</span>\r\n//                     {errors.general}\r\n//                 </div>\r\n//             )}\r\n\r\n//             <form onSubmit={handleSubmit} className=\"add-subject-form\" noValidate>\r\n//                 <div className=\"form-grid\">\r\n//                     {/* Subject Name */}\r\n//                     <div className=\"form-group\">\r\n//                         <label htmlFor=\"name\" className=\"form-label\">\r\n//                             Subject Name *\r\n//                         </label>\r\n//                         <div className=\"input-wrapper\">\r\n//                             <input \r\n//                                 type=\"text\" \r\n//                                 id=\"name\"\r\n//                                 name=\"name\" \r\n//                                 placeholder=\"Enter subject name (e.g., Introduction to Computer Science)\" \r\n//                                 value={formData.name} \r\n//                                 onChange={handleChange}\r\n//                                 onBlur={handleBlur}\r\n//                                 required \r\n//                                 disabled={submitting}\r\n//                                 className={`form-input ${isFieldInvalid('name') ? 'invalid' : ''} ${isFieldValid('name') ? 'valid' : ''}`}\r\n//                             />\r\n//                             <div className=\"input-status\">\r\n//                                 {isFieldValid('name') && <span className=\"valid-icon\">✅</span>}\r\n//                                 {isFieldInvalid('name') && <span className=\"invalid-icon\">❌</span>}\r\n//                             </div>\r\n//                         </div>\r\n//                         {errors.name && <div className=\"field-error\">{errors.name}</div>}\r\n//                     </div>\r\n\r\n//                     {/* Subject Code */}\r\n//                     <div className=\"form-group\">\r\n//                         <label htmlFor=\"code\" className=\"form-label\">\r\n//                             Subject Code *\r\n//                         </label>\r\n//                         <div className=\"input-wrapper\">\r\n//                             <input \r\n//                                 type=\"text\" \r\n//                                 id=\"code\"\r\n//                                 name=\"code\" \r\n//                                 placeholder=\"Enter subject code (e.g., CS101)\" \r\n//                                 value={formData.code} \r\n//                                 onChange={handleChange}\r\n//                                 onBlur={handleBlur}\r\n//                                 required \r\n//                                 disabled={submitting}\r\n//                                 className={`form-input ${isFieldInvalid('code') ? 'invalid' : ''} ${isFieldValid('code') ? 'valid' : ''}`}\r\n//                                 style={{ textTransform: 'uppercase' }}\r\n//                             />\r\n//                             <div className=\"input-status\">\r\n//                                 {isFieldValid('code') && <span className=\"valid-icon\">✅</span>}\r\n//                                 {isFieldInvalid('code') && <span className=\"invalid-icon\">❌</span>}\r\n//                             </div>\r\n//                         </div>\r\n//                         {errors.code && <div className=\"field-error\">{errors.code}</div>}\r\n//                     </div>\r\n\r\n//                     {/* Credits */}\r\n//                     <div className=\"form-group\">\r\n//                         <label htmlFor=\"credits\" className=\"form-label\">\r\n//                             Credits *\r\n//                         </label>\r\n//                         <div className=\"input-wrapper\">\r\n//                             <input \r\n//                                 type=\"number\" \r\n//                                 id=\"credits\"\r\n//                                 name=\"credits\" \r\n//                                 placeholder=\"Enter credits (1-10)\" \r\n//                                 value={formData.credits} \r\n//                                 onChange={handleChange}\r\n//                                 onBlur={handleBlur}\r\n//                                 required \r\n//                                 min=\"1\"\r\n//                                 max=\"10\"\r\n//                                 disabled={submitting}\r\n//                                 className={`form-input ${isFieldInvalid('credits') ? 'invalid' : ''} ${isFieldValid('credits') ? 'valid' : ''}`}\r\n//                             />\r\n//                             <div className=\"input-status\">\r\n//                                 {isFieldValid('credits') && <span className=\"valid-icon\">✅</span>}\r\n//                                 {isFieldInvalid('credits') && <span className=\"invalid-icon\">❌</span>}\r\n//                             </div>\r\n//                         </div>\r\n//                         {errors.credits && <div className=\"field-error\">{errors.credits}</div>}\r\n//                     </div>\r\n\r\n//                     {/* Department */}\r\n//                     <div className=\"form-group\">\r\n//                         <label htmlFor=\"department\" className=\"form-label\">\r\n//                             Department *\r\n//                         </label>\r\n//                         <div className=\"input-wrapper\">\r\n//                             <input \r\n//                                 type=\"text\" \r\n//                                 id=\"department\"\r\n//                                 name=\"department\" \r\n//                                 placeholder=\"Enter department (e.g., Computer Science)\" \r\n//                                 value={formData.department} \r\n//                                 onChange={handleChange}\r\n//                                 onBlur={handleBlur}\r\n//                                 required \r\n//                                 disabled={submitting}\r\n//                                 className={`form-input ${isFieldInvalid('department') ? 'invalid' : ''} ${isFieldValid('department') ? 'valid' : ''}`}\r\n//                             />\r\n//                             <div className=\"input-status\">\r\n//                                 {isFieldValid('department') && <span className=\"valid-icon\">✅</span>}\r\n//                                 {isFieldInvalid('department') && <span className=\"invalid-icon\">❌</span>}\r\n//                             </div>\r\n//                         </div>\r\n//                         {errors.department && <div className=\"field-error\">{errors.department}</div>}\r\n//                     </div>\r\n\r\n//                     {/* Semester */}\r\n//                     <div className=\"form-group\">\r\n//                         <label htmlFor=\"semester\" className=\"form-label\">\r\n//                             Semester *\r\n//                         </label>\r\n//                         <div className=\"input-wrapper\">\r\n//                             <input \r\n//                                 type=\"number\" \r\n//                                 id=\"semester\"\r\n//                                 name=\"semester\" \r\n//                                 placeholder=\"Enter semester (1-8)\" \r\n//                                 value={formData.semester} \r\n//                                 onChange={handleChange}\r\n//                                 onBlur={handleBlur}\r\n//                                 required \r\n//                                 min=\"1\"\r\n//                                 max=\"8\"\r\n//                                 disabled={submitting}\r\n//                                 className={`form-input ${isFieldInvalid('semester') ? 'invalid' : ''} ${isFieldValid('semester') ? 'valid' : ''}`}\r\n//                             />\r\n//                             <div className=\"input-status\">\r\n//                                 {isFieldValid('semester') && <span className=\"valid-icon\">✅</span>}\r\n//                                 {isFieldInvalid('semester') && <span className=\"invalid-icon\">❌</span>}\r\n//                             </div>\r\n//                         </div>\r\n//                         {errors.semester && <div className=\"field-error\">{errors.semester}</div>}\r\n//                     </div>\r\n\r\n//                     {/* Subject Type */}\r\n//                     <div className=\"form-group\">\r\n//                         <label htmlFor=\"type\" className=\"form-label\">\r\n//                             Subject Type *\r\n//                         </label>\r\n//                         <div className=\"input-wrapper\">\r\n//                             <select \r\n//                                 id=\"type\"\r\n//                                 name=\"type\" \r\n//                                 value={formData.type} \r\n//                                 onChange={handleChange}\r\n//                                 required \r\n//                                 disabled={submitting}\r\n//                                 className=\"form-select\"\r\n//                             >\r\n//                                 <option value=\"Core\">Core Subject</option>\r\n//                                 <option value=\"Elective\">Elective</option>\r\n//                                 <option value=\"Lab\">Laboratory</option>\r\n//                             </select>\r\n//                             <div className=\"select-arrow\">▼</div>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n\r\n//                 {/* Hours Section */}\r\n//                 <div className=\"hours-section\">\r\n//                     <h4 className=\"section-title\">\r\n//                         <span className=\"section-icon\">⏰</span>\r\n//                         Weekly Hours\r\n//                     </h4>\r\n//                     <div className=\"hours-grid\">\r\n//                         <div className=\"form-group\">\r\n//                             <label htmlFor=\"lectureHours\" className=\"form-label\">\r\n//                                 Lecture Hours\r\n//                             </label>\r\n//                             <div className=\"input-wrapper\">\r\n//                                 <input \r\n//                                     type=\"number\" \r\n//                                     id=\"lectureHours\"\r\n//                                     name=\"lectureHours\" \r\n//                                     placeholder=\"Enter lecture hours\" \r\n//                                     value={formData.lectureHours} \r\n//                                     onChange={handleChange}\r\n//                                     onBlur={handleBlur}\r\n//                                     min=\"0\"\r\n//                                     max=\"20\"\r\n//                                     disabled={submitting}\r\n//                                     className={`form-input ${isFieldInvalid('lectureHours') ? 'invalid' : ''} ${isFieldValid('lectureHours') ? 'valid' : ''}`}\r\n//                                 />\r\n//                                 <div className=\"input-status\">\r\n//                                     {isFieldValid('lectureHours') && <span className=\"valid-icon\">✅</span>}\r\n//                                     {isFieldInvalid('lectureHours') && <span className=\"invalid-icon\">❌</span>}\r\n//                                 </div>\r\n//                             </div>\r\n//                             {errors.lectureHours && <div className=\"field-error\">{errors.lectureHours}</div>}\r\n//                         </div>\r\n\r\n//                         <div className=\"form-group\">\r\n//                             <label htmlFor=\"labHours\" className=\"form-label\">\r\n//                                 Lab Hours\r\n//                             </label>\r\n//                             <div className=\"input-wrapper\">\r\n//                                 <input \r\n//                                     type=\"number\" \r\n//                                     id=\"labHours\"\r\n//                                     name=\"labHours\" \r\n//                                     placeholder=\"Enter lab hours\" \r\n//                                     value={formData.labHours} \r\n//                                     onChange={handleChange}\r\n//                                     onBlur={handleBlur}\r\n//                                     min=\"0\"\r\n//                                     max=\"20\"\r\n//                                     disabled={submitting}\r\n//                                     className={`form-input ${isFieldInvalid('labHours') ? 'invalid' : ''} ${isFieldValid('labHours') ? 'valid' : ''}`}\r\n//                                 />\r\n//                                 <div className=\"input-status\">\r\n//                                     {isFieldValid('labHours') && <span className=\"valid-icon\">✅</span>}\r\n//                                     {isFieldInvalid('labHours') && <span className=\"invalid-icon\">❌</span>}\r\n//                                 </div>\r\n//                             </div>\r\n//                             {errors.labHours && <div className=\"field-error\">{errors.labHours}</div>}\r\n//                         </div>\r\n//                     </div>\r\n//                     {errors.hours && <div className=\"field-error section-error\">{errors.hours}</div>}\r\n//                 </div>\r\n\r\n//                 {/* Form Actions */}\r\n//                 <div className=\"form-actions\">\r\n//                     <button \r\n//                         type=\"button\" \r\n//                         onClick={handleReset}\r\n//                         className=\"btn btn-outline\"\r\n//                         disabled={submitting}\r\n//                     >\r\n//                         <span className=\"btn-icon\">🔄</span>\r\n//                         Clear Form\r\n//                     </button>\r\n                    \r\n//                     {onCancel && (\r\n//                         <button \r\n//                             type=\"button\" \r\n//                             onClick={onCancel}\r\n//                             className=\"btn btn-secondary\"\r\n//                             disabled={submitting}\r\n//                         >\r\n//                             <span className=\"btn-icon\">❌</span>\r\n//                             Cancel\r\n//                         </button>\r\n//                     )}\r\n                    \r\n//                     <button \r\n//                         type=\"submit\" \r\n//                         className=\"btn btn-primary\"\r\n//                         disabled={submitting || Object.keys(errors).length > 0}\r\n//                     >\r\n//                         <span className=\"btn-icon\">\r\n//                             {submitting ? '⏳' : '💾'}\r\n//                         </span>\r\n//                         {submitting ? 'Adding Subject...' : 'Add Subject'}\r\n//                     </button>\r\n//                 </div>\r\n//             </form>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default AddSubjectForm;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}